from random import randint


class Ship:
    def __init__(self, name, length):
        self.name = name
        self.length = length
        self.x = None
        self.y = None
        self.alignment = None

    def set_position(self, x, y):
        self.x = x
        self.y = y

    def set_alignment(self, alignment):
        self.alignment = alignment


class Board:
    def __init__(self):
        self.game_board = [['_'] * 10 for x in range(10)]
        self.hit_counter = 0

    def display_board(self):
        '''Prints a 10 x 10 grid of cells aligned with the numbers 0 - 9 on the leftside and top of the grid.'''
        print(' '.join(' 0123456789'))
        for i, row in enumerate(self.game_board):
            print(i, ' '.join(row))

    def display_oppents_board(self):
        '''Prints the players' opponent's board without the boat locations. This function modifies the board and calls the display_board function to print the modified board.'''
        new_board = list()
        for row in self.game_board:
            with_Bs = '~'.join(row)
            no_Bs = with_Bs.replace('B', '_')
            new_board.append(no_Bs.split('~'))

        self.display_board()

    def winner_winner_chicken_dinner(self):
        '''Checks if the player won. The combined length of all the ships is 17. Returns true if the player had a 'hit' 17 times. Otherwise, return False.'''
        if self.hit_counter == 17:
            return True
        return False


class Player:
    def __init__(self, name):
        self.name = name
        self.player_board = Board()
        self.fleet = (Ship('carrier', 5), Ship('battleship', 4), Ship('cruiser', 3), Ship('submarine', 3), Ship('destroyer', 2))
        self.opponent = None

    def set_opponent(self, opponent):
        '''Sets the player's opponent. 'opponent' is another player object.'''
        self.opponent = opponent


class HumanPlayer(Player):
    def place_fleet(self):
        '''Places all of the boats on the board. Helper method is the find_spot function.'''
        input("Commander! We're under attack! Position the fleet! (Press any key to begin)")
        for boat in self.fleet:
            self.find_spot(boat)
        print("The board is positioned as follows:")
        self.player_board.display_board()

    def find_spot(self, boat):
        '''Prompts the player where to place the ship on the board and how to align it. Helper method is the place_boat function.'''
        self.player_board.display_board()
        instructions = 'Place the {}, of a length {}, on the board.'
        print(instructions.format(boat.name, boat.length))

        alignment = None
        while alignment is None:
            alignment = input('Vertical or Horizontal (v/h)? ')
            if alignment != 'v' and alignment != 'h':
                print('Come on! v or h?!')
                alignment = None
        else:
            boat.set_alignment(alignment)

        position = None
        while position is None:
            try:
                position = input('Enter the starting coordinate for the ship.' +
                                 ' Use the form: x, y (e.g. 1, 3): ')
                x, y = map(int, position.split(','))
                boat.set_position(x, y)
                if not self.place_boat(boat):
                    raise Exception
            except ValueError:
                print("You must enter a valid position for the boat. Please try again.")
                position = None
            except:
                print("You must choose a position that is (a) on the board and (b) doesn't intersect with any other boats.")
                position = None

    def place_boat(self, boat):
        '''Places a boat on the board. Returns true if the player enters coordinates that place the entire ship on the board and the ship doesn't intersect with another ship on the board. Otherwise, return False.'''
        row = column = 1
        if boat.alignment == 'v':
            row = boat.length
        else:
            column = boat.length
        if (boat.x < 0) or \
           (boat.y < 0) or \
           (boat.x + row > 10) or \
           (boat.y + column > 10):
            return False
        for x in range(row):
            for y in range(column):
                if self.player_board.game_board[boat.x + x][boat.y + y] != '_':
                    return False
        for x in range(row):
            for y in range(column):
                self.player_board.game_board[boat.x + x][boat.y + y] = 'B'
        return True


class ComputerPlayer(Player):
    def computer_place_fleet(self):
        for boat in self.fleet:
            self.computer_find_spot(boat)
        self.player_board.display_board()

    def computer_find_spot(self, boat):
        alignment = 'v' if randint(0, 1) else 'h'
        boat.set_alignment(alignment)

        while boat.x is None and boat.y is None:
            boat.x = randint(0, 9)
            boat.y = randint(0, 9)
            if not self.computer_place_boat(boat):
                boat.x = None
                boat.y = None

    def computer_place_boat(self, boat):
        row = 1
        column = 1
        if boat.alignment == 'v':
            row = boat.x
        else:
            column = boat.y
        if (boat.x + row > 10) or (boat.y + column > 10):
            return False
        for x in range(row):
            for y in range(column):
                if self.player_board.game_board[boat.x + x][boat.y + y] != '_':
                    return False
        for x in range(row):
            for y in range(column):
                self.player_board.game_board[boat.x + x][boat.y + y] = 'B'
        return True


class Game:
    def __init__(self, number_of_players):
        if number_of_players == 2:
            self.players = [HumanPlayer('player 1'), HumanPlayer('player 2')]
        else:
            self.players = [HumanPlayer('player 1'), ComputerPlayer('computer')]

        self.players[0].set_opponent(self.players[1])
        self.players[1].set_opponent(self.players[0])

    def play_again(self):
        '''Asks the player if he/she wishes to play the game again. Returns true if the player's response starts with a "y". Otherwise, return False.'''
        while True:
            again = input('CONTINUE? ')
            again = again.lower()
            if again.startswith('y'):
                return True
            else:
                print('EXITING GAME')
                return False


def main():
    # battle_of_tar = Game(2)
    # print(battle_of_tar.players[0].opponent.name)
    comp = ComputerPlayer('Rob')
    comp.computer_place_fleet()


if __name__ == '__main__':
    main()
